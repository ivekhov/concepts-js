// BEGIN
export const getDirectorySize = (dirpath, cb) => {

  // читаем содержимое переданной папки dirpath
  // readdir принимает вторым аргументом колбэк с двумя аргументами
  // второй аргумент колбэка, filenames, - это массив имен файлов и папок
  fs.readdir(dirpath, (error1, filenames) => {


    // первым делом обрабатываем ошибку - передаем ошибку в колбэк cb,
    // опуская 2-й аргумент, хотя допустимо туда явно передавать null,
    // а из самой функции выходим через return
    if (error1) {
      cb(error1);
      return;
    }

    // если ошибки нет - работаем
    // собираем путь к каждому файлу, синхронная функция
    const filepaths = filenames.map((name) => path.join(dirpath, name));


    // теперь извлекаем информацию о каждом файле/папке
    // при помощи асинхронной функции fs.stat
    // она тоже принимает вторым аргументом колбэк с двумя аргументами
    async.map(filepaths, fs.stat, (error2, stats) => {

      // точно так же обрабатываем ошибку
      if (error2) {
        cb(error2);
        return;
      }

      // если ошибок нет, мы работаем с массивом stats -
      // результатом применения fs.stat к каждому элементу массива filepaths
      // в _.sumBy() передаем массив отфильтрованных файлов первым аргументом,
      // ведь поддиректории мы тут не учитываем,
      // а вторым - имя свойства, по которому осуществляем сложение,
      const sum = _.sumBy(stats.filter((stat) => stat.isFile()), 'size');

      // передаем результат во второй параметр колбэка
      cb(null, sum);
    });
  });
};
// END










Реализуйте и экспортируйте асинхронную функцию getDirectorySize(),
которая считает размер переданной директории не включая поддиректории.

Анализ размера файла должен происходить параллельно, для этого воспользуйтесь библиотекой async

getDirectorySize('/usr/local/bin', (err, size) => {
  console.log(size);
});

Подсказки
fs.readdir() - чтение содержимого директории, возвращает файлы и папки в директории
path.join() - конструирует пути
async.map()
fs.stat() - информация о файле. В получаемом объекте содержится метод isFile() для проверки является ли элемент файлом
_.sumBy() - нахождение суммы в массиве
колбек должен вызываться и в случае ошибки
